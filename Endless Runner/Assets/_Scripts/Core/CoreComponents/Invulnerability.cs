using System.Collections;
using UnityEngine;

namespace TheCreators.CoreSystem.CoreComponents
{
    public class Invulnerability : BaseCoreComponent
    {
        private readonly Movement _movement;
        private Movement Movement
        {
            get => _movement != null ? _movement : Core.GetCoreComponent<Movement>();
        }
        private readonly InputController _inputController;
        private InputController InputController
        {
            get => _inputController != null ? _inputController : Core.GetCoreComponent<InputController>();
        }
        private readonly SpriteRendererComponent _spriteRendererComponent;
        private SpriteRendererComponent SpriteRendererComponent
        {
            get => _spriteRendererComponent != null ? _spriteRendererComponent : Core.GetCoreComponent<SpriteRendererComponent>();
        }
        private readonly StateMachineComponent _stateMachine;
        private StateMachineComponent StateMachine
        {
            get => _stateMachine != null ? _stateMachine : Core.GetCoreComponent<StateMachineComponent>();
        }
        [SerializeField] private int _playerLayer;
        [SerializeField] private int _obstaclesLayer;
        public void StartInvulnerability(float time)
        {
            Movement.Rigidbody.isKinematic = false;
            InputController.EnableInput();
            SpriteRendererComponent.gameObject.SetActive(true);
            Movement.gameObject.SetActive(true);
            StateMachine.gameObject.SetActive(true);
            StateMachine.StateMachine.SwitchState(StateMachine.runState);
            StartCoroutine(Action(time));
        }
        private IEnumerator Action(float time)
        {
            Movement.SetXVelocity(6);
            Physics2D.IgnoreLayerCollision(_playerLayer, _obstaclesLayer, true);
            yield return new WaitForSeconds(time);
            Physics2D.IgnoreLayerCollision(_playerLayer, _obstaclesLayer, false);
        }
    }
}